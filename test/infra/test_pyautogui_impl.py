from unittest import TestCase

from PIL import Image
from pyscreeze import Box

from src.domain.screen import Point
from src.domain.tile import TileType
from src.infra.pyautogui_impl import find_grid
from test.utils import _a_grid

easy_grid = Image.open("test/infra/easy-grid.png")
key_in_wrong_column_4_3 = Image.open("test/infra/key-in-wrong-column-4-3.png")
sword_not_detected_1_6 = Image.open("test/infra/sword-not-detected-1-6.png")
star_6_0 = Image.open("test/infra/star-6-0.png")
so_many_errors = Image.open("test/infra/so-many-errors.png")
while_combo = Image.open("test/infra/while-combo.png")
after_combo = Image.open("test/infra/after-combo.png")
two_steps_double_match_combo = Image.open("test/infra/two-steps-double-match-combo.png")

real_grid_size = Point(8, 7)


def _to_region(image: Image) -> Box:
    return Box(0, 0, image.size[0], image.size[1])


class TestFindGrid(TestCase):
    def test_find_grid(self):
        grid = find_grid(_to_region(easy_grid), easy_grid)

        expected_grid = [
            TileType.WAND,
            TileType.SWORD,
            TileType.KEY,
            TileType.LOGS,
            TileType.SHIELD,
            TileType.KEY,
            TileType.WAND,
            TileType.KEY,
            TileType.KEY,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.WAND,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.WAND,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.CHEST,
            TileType.KEY,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.KEY,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.WAND,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.WAND,
            TileType.CHEST,
            TileType.CHEST,
            TileType.KEY,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.KEY,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.KEY,
            TileType.LOGS,
            TileType.SWORD,
            TileType.CHEST,
            TileType.KEY,
            TileType.SHIELD,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.KEY,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.SWORD,
            TileType.KEY,
            TileType.CHEST,
            TileType.WAND,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_star_6_0(self):
        grid = find_grid(_to_region(star_6_0), star_6_0)

        expected_grid = [
            TileType.SWORD,
            TileType.WAND,
            TileType.LOGS,
            TileType.WAND,
            TileType.LOGS,
            TileType.STAR,
            TileType.SWORD,
            TileType.LOGS,
            TileType.WAND,
            TileType.KEY,
            TileType.WAND,
            TileType.ROCKS,
            TileType.KEY,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.CHEST,
            TileType.WAND,
            TileType.ROCKS,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.KEY,
            TileType.CHEST,
            TileType.KEY,
            TileType.ROCKS,
            TileType.WAND,
            TileType.KEY,
            TileType.KEY,
            TileType.LOGS,
            TileType.SHIELD,
            TileType.SHIELD,
            TileType.ROCKS,
            TileType.KEY,
            TileType.LOGS,
            TileType.LOGS,
            TileType.SWORD,
            TileType.WAND,
            TileType.CHEST,
            TileType.CHEST,
            TileType.WAND,
            TileType.KEY,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.WAND,
            TileType.KEY,
            TileType.WAND,
            TileType.SWORD,
            TileType.SWORD,
            TileType.KEY,
            TileType.WAND,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_key_in_wrong_column_4_3(self):
        grid = find_grid(_to_region(key_in_wrong_column_4_3), key_in_wrong_column_4_3)

        expected_grid = [
            TileType.LOGS,
            TileType.WAND,
            TileType.KEY,
            TileType.ROCKS,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.SWORD,
            TileType.SWORD,
            TileType.WAND,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.KEY,
            TileType.KEY,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.LOGS,
            TileType.LOGS,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.WAND,
            TileType.KEY,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.KEY,
            TileType.CHEST,
            TileType.KEY,
            TileType.LOGS,
            TileType.LOGS,
            TileType.SHIELD,
            TileType.SHIELD,
            TileType.WAND,
            TileType.LOGS,
            TileType.KEY,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.SWORD,
            TileType.CHEST,
            TileType.SWORD,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.KEY,
            TileType.ROCKS,
            TileType.LOGS,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_so_many_errors(self):
        grid = find_grid(_to_region(so_many_errors), so_many_errors)

        expected_grid = [
            TileType.KEY,
            TileType.WAND,
            TileType.SWORD,
            TileType.CHEST,
            TileType.WAND,
            TileType.WAND,
            TileType.SWORD,
            TileType.CHEST,
            TileType.WAND,
            TileType.ROCKS,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.WAND,
            TileType.CHEST,
            TileType.SWORD,
            TileType.KEY,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.WAND,
            TileType.KEY,
            TileType.SHIELD,
            TileType.KEY,
            TileType.LOGS,
            TileType.SWORD,
            TileType.WAND,
            TileType.LOGS,
            TileType.KEY,
            TileType.CHEST,
            TileType.LOGS,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.ROCKS,
            TileType.KEY,
            TileType.SWORD,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.LOGS,
            TileType.SWORD,
            TileType.CHEST,
            TileType.WAND,
            TileType.WAND,
            TileType.KEY,
            TileType.CHEST,
            TileType.WAND,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_sword_not_detected_1_6(self):
        grid = find_grid(_to_region(sword_not_detected_1_6), sword_not_detected_1_6)

        expected_grid = [
            TileType.WAND,
            TileType.ROCKS,
            TileType.CHEST,
            TileType.WAND,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.WAND,
            TileType.WAND,
            TileType.SWORD,
            TileType.WAND,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.KEY,
            TileType.SWORD,
            TileType.SWORD,
            TileType.KEY,
            TileType.WAND,
            TileType.SHIELD,
            TileType.WAND,
            TileType.SWORD,
            TileType.LOGS,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.LOGS,
            TileType.WAND,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.KEY,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.CHEST,
            TileType.LOGS,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.WAND,
            TileType.LOGS,
            TileType.KEY,
            TileType.LOGS,
            TileType.WAND,
            TileType.KEY,
            TileType.SWORD,
            TileType.CHEST,
            TileType.LOGS,
            TileType.SHIELD,
            TileType.KEY,
            TileType.CHEST,
            TileType.WAND,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_while_combo(self):
        grid = find_grid(_to_region(while_combo), while_combo)

        expected_grid = [
            TileType.SWORD,
            TileType.KEY,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.SWORD,
            TileType.LOGS,
            TileType.SWORD,
            TileType.SWORD,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.WAND,
            TileType.LOGS,
            TileType.LOGS,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.KEY,
            TileType.WAND,
            TileType.CHEST,
            TileType.ROCKS,
            TileType.SHIELD,
            TileType.WAND,
            TileType.SHIELD,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.WAND,
            TileType.KEY,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.WAND,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.LOGS,
            TileType.KEY,
            TileType.ROCKS,
            TileType.WAND,
            TileType.CHEST,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.SHIELD,
            TileType.KEY,
            TileType.LOGS,
            TileType.SWORD,
            TileType.ROCKS,
            TileType.ROCKS,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.LOGS,
            TileType.KEY,
            TileType.WAND,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_after_combo(self):
        simulated_post_combo_grid = _a_grid(
            [
                TileType.WAND,
                TileType.WAND,
                TileType.KEY,
                TileType.ROCKS,
                TileType.LOGS,
                TileType.UNKNOWN,
                TileType.WAND,
                TileType.KEY,
                TileType.LOGS,
                TileType.ROCKS,
                TileType.LOGS,
                TileType.KEY,
                TileType.ROCKS,
                TileType.UNKNOWN,
                TileType.WAND,
                TileType.LOGS,
                TileType.LOGS,
                TileType.WAND,
                TileType.WAND,
                TileType.SWORD,
                TileType.SHIELD,
                TileType.UNKNOWN,
                TileType.KEY,
                TileType.ROCKS,
                TileType.SHIELD,
                TileType.SWORD,
                TileType.SWORD,
                TileType.CHEST,
                TileType.LOGS,
                TileType.WAND,
                TileType.CHEST,
                TileType.KEY,
                TileType.SWORD,
                TileType.KEY,
                TileType.LOGS,
                TileType.CHEST,
                TileType.KEY,
                TileType.SWORD,
                TileType.WAND,
                TileType.LOGS,
                TileType.CHEST,
                TileType.LOGS,
                TileType.ROCKS,
                TileType.SWORD,
                TileType.SHIELD,
                TileType.CHEST,
                TileType.KEY,
                TileType.WAND,
                TileType.LOGS,
                TileType.WAND,
                TileType.SHIELD,
                TileType.ROCKS,
                TileType.LOGS,
                TileType.KEY,
                TileType.SWORD,
                TileType.CHEST,
            ],
            real_grid_size,
        )

        grid = find_grid(_to_region(after_combo), after_combo, simulated_post_combo_grid)

        expected_grid = [
            TileType.WAND,
            TileType.WAND,
            TileType.KEY,
            TileType.ROCKS,
            TileType.LOGS,
            TileType.UNKNOWN,
            TileType.WAND,
            TileType.KEY,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.LOGS,
            TileType.KEY,
            TileType.ROCKS,
            TileType.UNKNOWN,
            TileType.WAND,
            TileType.LOGS,
            TileType.LOGS,
            TileType.WAND,
            TileType.WAND,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.ROCKS,
            TileType.KEY,
            TileType.ROCKS,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.SWORD,
            TileType.CHEST,
            TileType.LOGS,
            TileType.WAND,
            TileType.CHEST,
            TileType.KEY,
            TileType.SWORD,
            TileType.KEY,
            TileType.LOGS,
            TileType.CHEST,
            TileType.KEY,
            TileType.SWORD,
            TileType.WAND,
            TileType.LOGS,
            TileType.CHEST,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.KEY,
            TileType.WAND,
            TileType.LOGS,
            TileType.WAND,
            TileType.SHIELD,
            TileType.ROCKS,
            TileType.LOGS,
            TileType.KEY,
            TileType.SWORD,
            TileType.CHEST,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])

    def test_two_steps_double_match_combo(self):
        simulated_post_combo_grid = _a_grid(
            [
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.KEY,
                TileType.ROCKS,
                TileType.ROCKS,
                TileType.WAND,
                TileType.SWORD,
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.UNKNOWN,
                TileType.ROCKS,
                TileType.WAND,
                TileType.SHIELD,
                TileType.CHEST,
                TileType.CHEST,
                TileType.UNKNOWN,
                TileType.SWORD,
                TileType.CHEST,
                TileType.ROCKS,
                TileType.CHEST,
                TileType.CHEST,
                TileType.SWORD,
                TileType.CHEST,
                TileType.CHEST,
                TileType.KEY,
                TileType.WAND,
                TileType.LOGS,
                TileType.SWORD,
                TileType.LOGS,
                TileType.LOGS,
                TileType.ROCKS,
                TileType.SWORD,
                TileType.LOGS,
                TileType.ROCKS,
                TileType.SWORD,
                TileType.CHEST,
                TileType.CHEST,
                TileType.KEY,
                TileType.SHIELD,
                TileType.KEY,
                TileType.SHIELD,
                TileType.SWORD,
                TileType.LOGS,
                TileType.KEY,
                TileType.WAND,
                TileType.LOGS,
                TileType.SWORD,
                TileType.KEY,
                TileType.CHEST,
                TileType.SHIELD,
                TileType.SWORD,
                TileType.CHEST,
                TileType.KEY,
            ],
            real_grid_size,
        )

        grid = find_grid(_to_region(two_steps_double_match_combo), two_steps_double_match_combo, simulated_post_combo_grid)

        expected_grid = [
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.UNKNOWN,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.KEY,
            TileType.ROCKS,
            TileType.ROCKS,
            TileType.WAND,
            TileType.SWORD,
            TileType.CHEST,
            TileType.WAND,
            TileType.WAND,
            TileType.ROCKS,
            TileType.WAND,
            TileType.SHIELD,
            TileType.CHEST,
            TileType.CHEST,
            TileType.KEY,
            TileType.SWORD,
            TileType.CHEST,
            TileType.ROCKS,
            TileType.CHEST,
            TileType.CHEST,
            TileType.SWORD,
            TileType.CHEST,
            TileType.CHEST,
            TileType.KEY,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.LOGS,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.LOGS,
            TileType.ROCKS,
            TileType.SWORD,
            TileType.CHEST,
            TileType.CHEST,
            TileType.KEY,
            TileType.SHIELD,
            TileType.KEY,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.LOGS,
            TileType.KEY,
            TileType.WAND,
            TileType.LOGS,
            TileType.SWORD,
            TileType.KEY,
            TileType.CHEST,
            TileType.SHIELD,
            TileType.SWORD,
            TileType.CHEST,
            TileType.KEY,
        ]

        self.assertEqual(expected_grid, [tile.type for tile in grid])
